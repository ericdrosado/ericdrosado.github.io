<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-06-29T14:28:24-05:00</updated><id>http://localhost:4000/</id><title type="html">On the Path to Software Craftsmanship</title><subtitle>Follow along on a journey of one 8th Light Student Aprentice's path to becoming a Software Craftsman.
</subtitle><entry><title type="html">The Law Of Demeter</title><link href="http://localhost:4000/2017/06/29/the-law-of-demeter.html" rel="alternate" type="text/html" title="The Law Of Demeter" /><published>2017-06-29T00:00:00-05:00</published><updated>2017-06-29T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/29/the-law-of-demeter</id><content type="html" xml:base="http://localhost:4000/2017/06/29/the-law-of-demeter.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;You know that moment when you are learning to program and everything starts to click. You start stringing together methods in what you believe to be this beautiful symphony of functionality. Then, you come across a blog post, article, or book that says, “Actually, don’t do that… .” In comes the Law of Demeter (LoD). What?! LoD focuses on the idea of minimizing coupling in your code. Coupling?! Coupling, refers to how objects can call upon each other for some sort of functionality. If I lost you, thats OK, that’s what examples are for. Let’s dive in.&lt;/p&gt;

&lt;h2&gt; The Law of Demeter Example &lt;/h2&gt;
&lt;p&gt;Let’s imagine a program message chain. It might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@printer.print(&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here I might have created a “printer object” that has a “print” method and I am using it to print “Hello.” OK, I’m utilizing an object to print something to the console using the method print. No coupling here! Now lets try to add another object into the loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@printer.print(@greeting.hello)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now here I have some coupling. Similar to before I have called my printer object to get it’s method print, but now I have another object named “greeting” that has a method named “hello,” which one might assume returns a “Hello” greeting. Now “print” is taking in a parameter from this object (greeting) and it’s method (hello). These objects have been coupled together. They are utilizing each others services in order to create some sort of functionality.&lt;/p&gt;

&lt;p&gt;Coupling is a necessity when it comes to functionality of code, but when it comes to breaking LoD that is when your coupling has gone from a necessity to an act of misuse. When is coupling bad? Well, when you are traversing through a great deal of classes in order to gain the functionality of a single method, then you know you might have a design problem. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@company.get_greeting(@manager.speak(@employee.speak(@apprentice.speak(@greeting.hello)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how we traversed through multiple methods in order to obtain a single prompt for a greeting. This is problematic and reveals a few things about our code. One, our code interface might not be ideal if we have to traverse through so many methods. In turn, our code may know too much about other classes. No, our code doesn’t actually know about other methods per say, but what is happening is your knowledge of this particular piece of software is allowing you to reach out to far distances of classes in order to gain some sort of functionality that you need in a specific spot. It would be better to use code that hides implementation details from another class. What we have done in essence is bind our classes to each other by making these calls. Two, what happens if we happen to change a class or method along this particular path? We’ll be in a bit of trouble rewriting all of this code to account for the change.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;In the end it pays to decouple long chains of code to avoid pain later. It would be better to utilize an interface that minimizes this sort of chaining as well as creating classes that hide implementation from other classes so that classes don’t pick and choose which methods they want to utilize. If we allow this “picking and choosing” of methods this creates an unmanageable web of code if something should change. You lose a great deal of flexbility in your code. Follow LoD the best you can.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: You know that moment when you are learning to program and everything starts to click. You start stringing together methods in what you believe to be this beautiful symphony of functionality. Then, you come across a blog post, article, or book that says, “Actually, don’t do that… .” In comes the Law of Demeter (LoD). What?! LoD focuses on the idea of minimizing coupling in your code. Coupling?! Coupling, refers to how objects can call upon each other for some sort of functionality. If I lost you, thats OK, that’s what examples are for. Let’s dive in.</summary></entry><entry><title type="html">Dependency Inversion Principle</title><link href="http://localhost:4000/2017/06/20/dependency-inversion-principle.html" rel="alternate" type="text/html" title="Dependency Inversion Principle" /><published>2017-06-20T00:00:00-05:00</published><updated>2017-06-20T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/20/dependency-inversion-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/20/dependency-inversion-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;If you have been following along in my journey through the SOLID principles, well, you’ve made it to the last principle, Dependency Inversion Principle (DIP). The DIP focuses on the importance of abstraction in creating software flexibility. Ultimately you want to depend on class abstractions as opposed to class concretions. What does this all mean? Lets go over it with an example.&lt;/p&gt;

&lt;h2&gt; Dependency Inversion Principle Example &lt;/h2&gt;
&lt;p&gt;Let’s continue to use our Art Gallery example and lets say that our Artwork class begins to become more complex with time and now there are lower level classes that it relies on, such as a wide variety of different types of paintings of specific eras. Let’s start with a MiddleAgesPainting Class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def initialize()
    @middle_ages_painting = MiddleAgesPainting.new
  end

  def get_description
    @middle_ages_painting.description
  end

end

class MiddleAgesPainting

  def get_description
    #description
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So to go over the ruby above, what we have is a situation where our higher level class Artwork is dependent on its lower level counterpart when it comes to obtaining a description for MiddleAgesPainting. This seems fine, but what happens if we need to include a EarlyAndHighRenaissancePainting class. Now we are starting to add a bit of complication to our code that could continue to get messy with each additional era class that pops up. This is a violation of the DIP. What we want to do is depend on an abstraction of description as to not clutter our Artwork class. How do we do that? Let’s take a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def initialize(middle_ages_painting, early_and_high_renaissance_painting )
    @middle_ages_painting = middle_ages_painting
    @early_and_high_renaissance_painting = early_and_high_renaissance_painting
  end

  def get_description painting_era
    painting_era.description
  end

end

class MiddleAgesPainting

  def get_description
    #description
  end

end

class EarlyAndHighRenaissancePainting

  def get_description
    #description
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we have done some abstraction in the sense that my Arwork class is no longer reliant on any one of the lower level classes such as MiddleAgesPainting or EarlyAndHighRenaissancePainting. Instead, we have a situation where the painting_era can be passed through get_description in the Artwork class.&lt;/p&gt;

&lt;p&gt;I have also utilized a technique called Dependency Injection,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def initialize(middle_ages_painting, early_and_high_renaissance_painting )
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where I pass my painting era classes into my Artwork class through the initialize method so it is easily accessible to my Artwork class. This supports my higher level code with the ability to call down to my lower level code.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;As you can see, by utilizing abstractions we have a greater deal of flexibility with our code. If we used the first example, which is a concrete connection between my Artwork class and my MiddleAgesPainting class, I would have to do that for every additional painting era class that would come about over time, which in turn would force me to change my Artwork class often and hard code it to all these othere classes. Using DIP has now given me the freedom for my higher level class to call down to my lower level classes in an efficient way.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: If you have been following along in my journey through the SOLID principles, well, you’ve made it to the last principle, Dependency Inversion Principle (DIP). The DIP focuses on the importance of abstraction in creating software flexibility. Ultimately you want to depend on class abstractions as opposed to class concretions. What does this all mean? Lets go over it with an example.</summary></entry><entry><title type="html">Interface Segregation Principle</title><link href="http://localhost:4000/2017/06/19/interface-segregation-principle.html" rel="alternate" type="text/html" title="Interface Segregation Principle" /><published>2017-06-19T00:00:00-05:00</published><updated>2017-06-19T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/19/interface-segregation-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/19/interface-segregation-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Much like the Single Responsibility Principle we have another principle that seeks to maintain separation of different software responsibilities in what is called the Interface Segregation Principle. The purpose of this principle is to ensure that a crafter is abstracting as much as possible when it comes to their particular piece of software. If you think of Java, you can create interfaces that allow you to abstract pieces of information that might not fit within a class hierarchy. This is helpful as it prevents creating dependencies that could cause issues down the road as the software grows.&lt;/p&gt;

&lt;p&gt;Java Interfaces aside, I believe what this principle is trying to get at is you want to separate functionality as much as possible so your software does not get tied up in what could become a situation where you have classes that do too much and in turn it makes it much harder to build flexibility into your software. Lets explore this with an example we’ve seen before.&lt;/p&gt;

&lt;h2&gt; Interface Segregation Principle Example &lt;/h2&gt;
&lt;p&gt;When I first blogged about SOLID, I started with the Single Responsibility Principle with the following example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    puts title
  end

  def get_artist artist
    puts artist
  end

  def get_description description
    puts description
  end

  def get_location location
    puts location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve used the Artwork Gallery example for all of the SOLID principles thus far, but for this particular principle let’s go back in time when our Gallery software was represented in a single class named Artwork.&lt;/p&gt;

&lt;p&gt;We’ve discussed that this is a clear violation of the Single Responsibility Principle. There is a lot going on in this one class and it lacks abstractions (aka lacks separation of methods) that allow for flexibility of your software. For instance, I’ve mentioned that this class is doing too much. It is printing values and giving you additional information such as location, which is not necessary when it comes to just getting basic information about the artwork.&lt;/p&gt;

&lt;p&gt;In the end of the Single Responsibility post we settled on the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end

class Location

  def get_location location
    location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, we abstracted by pulling out a Printer and Location class. We could have also created a printer interface for our Artwork class to handle Artwork specific printing. As mentioned many times before, this type of abstraction will help us greatly as our software grows.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Ultimately the biggest takeaway is that you want to prevent yourself from having a single interface that does too much. You want to have multiple interfaces to minimize dependencies on a single class. In the end you and your colleagues will be thankful that you did this from now and into the future.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Much like the Single Responsibility Principle we have another principle that seeks to maintain separation of different software responsibilities in what is called the Interface Segregation Principle. The purpose of this principle is to ensure that a crafter is abstracting as much as possible when it comes to their particular piece of software. If you think of Java, you can create interfaces that allow you to abstract pieces of information that might not fit within a class hierarchy. This is helpful as it prevents creating dependencies that could cause issues down the road as the software grows.</summary></entry><entry><title type="html">The Single Responsibility Principle</title><link href="http://localhost:4000/2017/06/16/the-single-responsibility-principle.html" rel="alternate" type="text/html" title="The Single Responsibility Principle" /><published>2017-06-16T00:00:00-05:00</published><updated>2017-06-16T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/16/the-single-responsibility-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/16/the-single-responsibility-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;SRP! The big fish of the SOLID world. It seems to me that out of all of the SOLID principles (Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation , Dependency Inversion) the Single Responsibility Principle (SRP) plays a role/ties all of the principles together. The Single Responsibility Principle states that each class and each method should have a single responsibility. As Uncle Bob would say, “A class should have only one reason to change,” which ultimately means that a class should have responsibility over a single part of functionality in a piece of software. In this post I would like to take an opportunity to explore some details of SRP and why is it important in the grand scheme of Object Oriented Programming (OOP).&lt;/p&gt;

&lt;h2&gt; SRP Example &lt;/h2&gt;
&lt;p&gt;I would like to use an example as a means to guide our exploration into SRP. Think of developing software for an art gallery. In the gallery they have a large array of art work that needs some cataloging which gives an art gallery employee the name of the artwork, the artists name, a description of the work, the location of the item in the gallery, and a means of printing the information out. Lets say we put all of these things in a single class to start named Artwork:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    puts title
  end

  def get_artist artist
    puts artist
  end

  def get_description description
    puts description
  end

  def get_location location
    puts location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After observing this class one might think…not bad, all the information that the curators at the gallery needed are in this class and everything is pretty accessible by calling one of the methods and passing a parameter. Well, not so my friend. There are a few instances where we are violating SRP.&lt;/p&gt;

&lt;p&gt;The first violation may be obvious, which is the fact that we are printing in every single method. Printing in itself has nothing to do with the logic of the artwork. We should be doing one thing and one thing only in each method. If a curator wants a title then he should be able to get the information they need from a call and print it elsewhere. So, how about this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

  def get_location location
    location
  end

  def print information_to_print
    puts information_to_print
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well, at this point we have pulled the logic of printing out of the methods and placed it into its own method in the Artwork class. This should also raise a red flag. We have now created a method in the class Artwork that has nothing to do with the Artwork as a whole. Artwork is suppose to provide information about the Artwork to the curator and the printing logic should not be considered a part of this class. So perhaps this will be better:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

  def get_location location
    location
  end

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now this is much better as we can make calls to printer if the curator needs to print certain information. Our code is now cleaner and offers us great flexibility if something is to be changed later on.&lt;/p&gt;

&lt;p&gt;Well, we are not quite done yet. Can you see something else that we might want to change? Remember, the Artwork class is made to provide information to the curator about the artwork in itself. Is there a method that we can pull from the Artwork class? Yes! That location class could probably move as it provides information about the location of the artwork, but not specific information that would be considered an attribute of artwork. Confused? Think about it this way, the artwork in itself is not dependent on location in order to identify it. The title, the artist name, and the description are attributes of the class and the location could change at any point so it is independent. So perhaps something like this would be better:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end

class Location

  def get_location location
    location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our software now offers great flexbility if something should change and now we have created reuseable classes that our software could utilize as it grows over time.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;SRP is obviously important when it comes to flexibility of our software. If we think back to our Artwork example, perhaps in the future the curators want to make specific classes of artwork such as paintings, sculptures, and so forth. We are prepared to extend our software because we have made it flexible. We are also able to reuse our printing and location classes for these new classes that are to be added. With SRP we have set ourselves up to develop clean Object Oriented (OO) code.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: SRP! The big fish of the SOLID world. It seems to me that out of all of the SOLID principles (Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation , Dependency Inversion) the Single Responsibility Principle (SRP) plays a role/ties all of the principles together. The Single Responsibility Principle states that each class and each method should have a single responsibility. As Uncle Bob would say, “A class should have only one reason to change,” which ultimately means that a class should have responsibility over a single part of functionality in a piece of software. In this post I would like to take an opportunity to explore some details of SRP and why is it important in the grand scheme of Object Oriented Programming (OOP).</summary></entry><entry><title type="html">Open Closed Principle</title><link href="http://localhost:4000/2017/06/16/open-closed-principle.html" rel="alternate" type="text/html" title="Open Closed Principle" /><published>2017-06-16T00:00:00-05:00</published><updated>2017-06-16T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/16/open-closed-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/16/open-closed-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;To build off of my SRP blog post, I would like to take the opportunity to explore the Open/Closed Principle of the SOLID Principles of Object Oriented Design. I’m going to refer back to the Art Gallery example that I used in my SRP blog post and build off that example to explore the Open/Closed Principle. The Open/Closed principle states that software should be open for extension and closed for modification. The basic idea is that we shouldn’t want to change code that is tested and works, but instead we want to extend its functionality by building off of it. Lets explore our previous example and see how this applies.&lt;/p&gt;

&lt;h2&gt; Open/Closed Principle Example &lt;/h2&gt;
&lt;p&gt;Lets return to the art gallery as our curators would like to add some additional functionality to the software we built for them. This is what we have so far:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end

class Location

  def get_location location
    location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, last time we made a few changes to adhere to SRP. We don’t want to change this code in any way that would jeopardize its functionality as we know it works.&lt;/p&gt;

&lt;p&gt;Lets say the curators want to be able to organize the artwork into groups, such as sculptures and paintings and they need similar attributes from artwork such as the title, artist, and description. Well, we can do that using inheritance! We can make additional classes that extend our artwork class and utilize its methods. So here we are extending the functionality (Open) and not disrupting the current functionality (Closed).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Sculpture &amp;lt; Artwork

end

class Painting &amp;lt; Artwork

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end

class Location

  def get_location location
    location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can now utilize the methods from artwork into our Sculpture and Painting classes as they will inherit them. We have extended our software’s functionality. Our new classes can also use the Printer and Location classes since we pulled them from the Artwork class in the SRP blog post.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;We have now extended the functionality of our software, but we did not modify our older code. We have followed the Open/Closed principle and now our code is much cleaner for it. If things change in the future, as they tend to do, we can continue to extend the functionality of our code. The Open/Closed Principle is definitely an important piece to clean OO code.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: To build off of my SRP blog post, I would like to take the opportunity to explore the Open/Closed Principle of the SOLID Principles of Object Oriented Design. I’m going to refer back to the Art Gallery example that I used in my SRP blog post and build off that example to explore the Open/Closed Principle. The Open/Closed principle states that software should be open for extension and closed for modification. The basic idea is that we shouldn’t want to change code that is tested and works, but instead we want to extend its functionality by building off of it. Lets explore our previous example and see how this applies.</summary></entry><entry><title type="html">Liskov Substitution Principle</title><link href="http://localhost:4000/2017/06/16/liskov-substitution-principle.html" rel="alternate" type="text/html" title="Liskov Substitution Principle" /><published>2017-06-16T00:00:00-05:00</published><updated>2017-06-16T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/16/liskov-substitution-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/16/liskov-substitution-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;In continuing our journey through the SOLID Principles of OOD, I’d like to address the Liskov Substitution Principle. This principle is very straightforward and it allows me an oportunity to build off my Open/Closed Principle post. The Liskov Substitution Principle states that subclasses should have the ability to substitute for their parent classes in a class heirarchy. Let’s look at the Open/Closed example and build off that.&lt;/p&gt;

&lt;h2&gt; Liskov Substitution Principle Example &lt;/h2&gt;
&lt;p&gt;Last time in the Open/Closed Principle blog post we introduced some new classes and we now have the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Sculpture &amp;lt; Artwork

end

class Painting &amp;lt; Artwork

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end

class Location

  def get_location location
    location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s not worry about the Printer and Location classes and remove them for now and lets focus on the class hierarchy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Sculpture &amp;lt; Artwork

end

class Painting &amp;lt; Artwork

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we have classes that inherit directly from Artwork, but they do not have methods of their own. Let’s say that in the sculpting word there are no such things as titles, but instead they like to call them names instead of titles. This example is a bit of a stretch, but we don’t have a name method in artwork in order for a sculpture to inherit. Perhaps we should motify get_title in sculpture and override it, but that would defeat the purpose of the inheritance.&lt;/p&gt;

&lt;p&gt;Ultimately we have the wrong abstration here, meaning perhaps we need to extend our Artwork class to have artwork with names and another with titles so that sculpture might work. We cannot substitute sculpture into Artwork because of this difference.&lt;/p&gt;

&lt;p&gt;So, that example might be a little hard to swallow. Lets look at another example that is commonly used:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Rectangle

  def get_width
  end

  def get_height
  end

end

class Square &amp;lt; Rectangle

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This might not look like a problem, but does it make sense that the Square class should inherit the two methods in Rectangle? No! With a square you don’t need to get a width and height, but just need the length of just one side. Once again, we need another level of abstraction here that can account for Rectangles and one for Squares. Squares cannot substitute in for Rectangles because rectangles have different dimensions. Thus, this breaks Liskov’s Substitution Principle.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Liskov’s Substitution Principle can really help with making sense of your class heirarchies. You can make the appropriate abstractions and allow yourself to have clean OO code.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: In continuing our journey through the SOLID Principles of OOD, I’d like to address the Liskov Substitution Principle. This principle is very straightforward and it allows me an oportunity to build off my Open/Closed Principle post. The Liskov Substitution Principle states that subclasses should have the ability to substitute for their parent classes in a class heirarchy. Let’s look at the Open/Closed example and build off that.</summary></entry><entry><title type="html">The Importance And Beauty Of Testing First</title><link href="http://localhost:4000/2017/06/02/the-importance-and-beauty-of-testing-first.html" rel="alternate" type="text/html" title="The Importance And Beauty Of Testing First" /><published>2017-06-02T00:00:00-05:00</published><updated>2017-06-02T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/02/the-importance-and-beauty-of-testing-first</id><content type="html" xml:base="http://localhost:4000/2017/06/02/the-importance-and-beauty-of-testing-first.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;My mentor happen to share Uncle Bob’s blog post &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2013/09/23/Test-first.html&quot;&gt; “Test First,” &lt;/a&gt; which has given me a great perspective on how TDD should be at the steering wheel of our code. I also read Corey Haines’, &lt;a href=&quot;https://leanpub.com/4rulesofsimpledesign&quot;&gt; “Understanding the Four Rules of Design”&lt;/a&gt;and he too describes the importance of tests as they pertain to software design.&lt;sup&gt; 1 &lt;/sup&gt;  These two readings really get at the heart of what this post will focus on. Lets focus on why testing is an imperative, and why “Testing First” should be a priority for yourself and the software crafters around you.&lt;/p&gt;

&lt;h2&gt; Why Test?&lt;/h2&gt;
&lt;p&gt;Much of my testing before being introduced to RSpec was focused on writing code and testing outputs on the command line.It worked, but there were many instances where I would hit a snag later down the line, because I didn’t consider certain aspects of how things should and would interact. I’m not saying that this doesn’t happen when you use TDD as a methodology, but TDD does accomplish two very important things. It helps you to think small and it also provides you with some great documentation/specification of what your code is trying to accomplish.&lt;/p&gt;

&lt;p&gt;For me, when it came to writing out an app, my mind would be racing about all the different components that the app would need in order to work. Now, I find that with TDD, if I open up RSpec and begin to write a test for my first method, it allows me to focus on the smaller aspects of my code. For instance, if I were to expect that my method returns a value in the end, well, there is my first test. I would write a test, allow it to fail and then write out the method that would allow my test to pass. This provides a great deal of focus, atleast for me, and alleviates some of the mind racing aspects of, “Oh! I need a method like this” or “What about if I tried this?!” nope… I’m just allowing the tests to steer me where I need to go on an individual method. Scientifically speaking, this is fantastic as your working memory can only hold four things at a time.&lt;/p&gt;

&lt;p&gt;If someone were to send me a large codebase for an app, I would probably get lost in its functionality as I go from method to method. It is a lot to take-in. I’m sure I would eventually figure out how everything worked, but the whole process might be a little easier if the code was followed with some tests. The specs from the test would provide me with enough insight as to what each piece of code is trying to accomplish. Not only that, but if the tests were written well enough, I could probably replicate the code myself, which in itself is absolutely amazing. You could think of your tests as a step by step guide of how to build your app. When you think about it, it’s kinda beautiful.&lt;/p&gt;

&lt;p&gt;Simply put, allow your tests to steer the path of your design to a completed product. Not only will your brain thank you for it, but so will the software crafters around you.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt; 1 &lt;/sup&gt; Haines, Corey. (2014, June 4). “Four Rules of Simple Design”. LeanuPub Publishing 2014&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: My mentor happen to share Uncle Bob’s blog post “Test First,” which has given me a great perspective on how TDD should be at the steering wheel of our code. I also read Corey Haines’, “Understanding the Four Rules of Design”and he too describes the importance of tests as they pertain to software design. 1 These two readings really get at the heart of what this post will focus on. Lets focus on why testing is an imperative, and why “Testing First” should be a priority for yourself and the software crafters around you.</summary></entry><entry><title type="html">The Usefulness Of Configurations In Rspec</title><link href="http://localhost:4000/2017/05/30/the-usefulness-of-configurations-in-rspec.html" rel="alternate" type="text/html" title="The Usefulness Of Configurations In Rspec" /><published>2017-05-30T00:00:00-05:00</published><updated>2017-05-30T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/30/the-usefulness-of-configurations-in-rspec</id><content type="html" xml:base="http://localhost:4000/2017/05/30/the-usefulness-of-configurations-in-rspec.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Using RSpec for testing is absoultely amazing for a complete beginner. I’ve personally dabbled in testing with Java, which was a bit rough, but I have to say that learning RSpec is super straightforward and the way RSpec reads is incredibly beautiful! Besides, reading RSpec in your favorite editor, testing results in the terminal can also read beautifully. The best part, you can customize how your tests look in the terminal through configurations. There is a list of RSpec configurations you can use, but I just want to talk about four of them that I recently learned about from Kevin Skoglund’s, “Ruby: Testing with RSpec - Configurations” video.&lt;sup&gt; 1 &lt;/sup&gt;&lt;/p&gt;

&lt;h2&gt; Configurations in RSpec: &lt;/h2&gt;
&lt;p&gt;The four Configurations that I plan on covering are: 
  1.) Run Tests at Random
  2.) Show Top 10 Slowest Tests
  3.) Find a Single Failure
  4.) Run a Particular Test&lt;/p&gt;

&lt;p&gt;You can set and save these configurations on your computer or you can ship them with code you might push to GitHub. For the purposes of this blog I am just going to show how to call these without saving them locally so you don’t have to make any changes to your environment or affect anyones settings in their personal enviornment by forking your code.&lt;/p&gt;

&lt;h3&gt;Run Tests at Random&lt;/h3&gt;
&lt;p&gt;In order to run tests at random you can traverse to the directory that is holding your .rspec file that you initiated. Once there you can run the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rspec --order random
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will run all your tests at random. Why would this be helpful? Well, lets say you have many tests and you want to insure that their order doesn’t play a role on whether or not they pass or fail, that would make this tool helpful.&lt;sup&gt; 1 &lt;/sup&gt;&lt;/p&gt;

&lt;h3&gt;Show Top 10 Slowest Tests&lt;/h3&gt;
&lt;p&gt;In order to show the top 10 slowest tests you can once again traverse to the directory that is holding your .rspec file that you initiated. Once there you can run the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rspec --profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will obviously give you a list of your top 10 slowest tests. If there is one thing I have learned is that tests should be fast! &lt;sup&gt; 2 &lt;/sup&gt; Tests should be fast so that you run them and run them often, whereas if you have very slow tests, you are less likely to run them all. Sometimes it is good to go back and see what you can do to allow your tests to run faster.&lt;/p&gt;

&lt;h3&gt;Find a Single Failure&lt;/h3&gt;
&lt;p&gt;In order to find a single failure you can once again traverse to the directory that is holding your .rspec file that you initiated. Once there you can run the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rspec --fail-fast
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will quickly run and find a single failure. This is helpful if you have many tests and you just want to deal with them one at a time. Really nothing more to it…moving on.&lt;/p&gt;

&lt;h3&gt;Run a particular test&lt;/h3&gt;
&lt;p&gt;Now, here is a tool you may come to love as much as I have. When it comes to trouble shooting sometimes you just need to test a specific test where this little one comes in handy. You can do this by typing in the name of the rspec file followed by the first line your test is on. In order to do this you need to be in the directory where your test file is or you can write out the path. Here is an example of a rspec file called “car_spec” while already traversing into the spec directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rspec car_spec.rb:7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the rspec call, then the file name, followed by the line number after the colon. Once again, a great way to test a specific test in your long list of tests.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt; 1 &lt;/sup&gt; Skoglund, Kevin. (2015, February 5). www.Lynda.com - Ruby: Testing with RSpec: Configuration .Retrieved from https://www.lynda.com/Ruby-tutorials/Configuration/183884/371434-4.html&lt;/p&gt;

&lt;p&gt;&lt;sup&gt; 2 &lt;/sup&gt; Haines, Corey. (2014, June 4). “Four Rules of Simple Design”. LeanuPub Publishing 2014&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Using RSpec for testing is absoultely amazing for a complete beginner. I’ve personally dabbled in testing with Java, which was a bit rough, but I have to say that learning RSpec is super straightforward and the way RSpec reads is incredibly beautiful! Besides, reading RSpec in your favorite editor, testing results in the terminal can also read beautifully. The best part, you can customize how your tests look in the terminal through configurations. There is a list of RSpec configurations you can use, but I just want to talk about four of them that I recently learned about from Kevin Skoglund’s, “Ruby: Testing with RSpec - Configurations” video. 1</summary></entry><entry><title type="html">How To Post Using Jekyll</title><link href="http://localhost:4000/2017/05/23/how-to-post-using-jekyll.html" rel="alternate" type="text/html" title="How To Post Using Jekyll" /><published>2017-05-23T00:00:00-05:00</published><updated>2017-05-23T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/23/how-to-post-using-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/05/23/how-to-post-using-jekyll.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Your first Jekyll post! Thankfully this is an incredibly simple process as long as you have already followed along with my previous post on &lt;a href=&quot;https://ericdrosado.github.io/2017/05/22/setting-up-jekyll-with-github-pages.html&quot;&gt; Setting up Jekyll with Github Pages &lt;/a&gt;, as I’ll assume all your directories have already been made for Jekyll.&lt;/p&gt;

&lt;h2&gt; Posting your First Post to GitHub Pages: &lt;/h2&gt;
&lt;p&gt;In order to post your first post to GitHub Pages you will need to be familiar with the naming requirement for Jekyll when it comes to posts. Jekyll requires that every post follows the naming convention: Year-Month-Day-title.Markup. So, for example, today is 5/23/17 and I wanted to name this post as “How to Post Using Jekyll.” I would create my document with the following name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-05-23-how-to-post-using-jekyll/jekyll_naming-example.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you know how to name your document you need to create/place your document into the correct directory. In your GitHub pages directory, _posts is where you will place all of your posts, because Jekyll has the functionality to find your posts and immediately publish them online once they have been pushed to GitHub.&lt;sup&gt; 1 &lt;/sup&gt; So, traverse into your _posts directory and save your document with the correct naming convention mentioned above.&lt;/p&gt;

&lt;p&gt;You can open the document, write your post and when you are done, push your changes to GitHub, in which Jekyll will automagically create your post on GitHub Pages. Wow!&lt;/p&gt;

&lt;p&gt;&lt;sup&gt; 1 &lt;/sup&gt; Writing Posts. (n.d.). Jekyll. Retrieved from https://jekyllrb.com/docs/posts/&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Your first Jekyll post! Thankfully this is an incredibly simple process as long as you have already followed along with my previous post on Setting up Jekyll with Github Pages , as I’ll assume all your directories have already been made for Jekyll.</summary></entry><entry><title type="html">Setting Up Jekyll With Github Pages</title><link href="http://localhost:4000/2017/05/22/setting-up-jekyll-with-github-pages.html" rel="alternate" type="text/html" title="Setting Up Jekyll With Github Pages" /><published>2017-05-22T00:00:00-05:00</published><updated>2017-05-22T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/22/setting-up-jekyll-with-github-pages</id><content type="html" xml:base="http://localhost:4000/2017/05/22/setting-up-jekyll-with-github-pages.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Well, that was painful, for a newbie… but then again, no pain…no gain! Cheesy lines aside, Jekyll is not as intuitive as it might seem from a beginners perspective. The documentation is heavy on jargon and there are multiple resources on both GitHub Pages and Jekyll, which have differing setup procedures and can be overwhelming. In fact, looking back on the other side it was incredibly easy, but you can easily get overwhelmed with all the information. They do point to a great resource in Jonathan McGlone’s &lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot;&gt; Creating and Hosting a Personal Site on GitHub &lt;/a&gt;. Although a great resource that really allows you to personalize your page, you can bypass this tutorial to get a simple blog up and running in a matter of minutes using this quick setup guide that I have written below with the help of documentation from GitHub Pages, Jekyll, and McGlone’s tutorial.&lt;/p&gt;

&lt;h2&gt; Setting Up GitHub Pages: &lt;/h2&gt;
&lt;p&gt;GitHub nails it with simplicity when they explain &lt;a href=&quot;https://pages.github.com&quot;&gt; how to create a GitHub page &lt;/a&gt;. My personal experience is that GitHub tries to take the perspective of someone who has absolutely no experience and they will guide you along the path. Highly recommend following the link to setup your page and meet me back here for the Jekyll setup.&lt;/p&gt;

&lt;h2&gt; Setting Up Jekyll: &lt;/h2&gt;
&lt;p&gt;When it comes to the Jekyll documentation there is a lot of additonal info that I would say a beginner need not look at for the sake of your own sanity. I still recommend looking at the documentation once you feel comfortable, because there are some great tools to curate your blog. So, to bypass the documentation follow the following steps:&lt;/p&gt;

&lt;p&gt;Step 1: 
You need to make sure you have the following on your computer: &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt; Ruby 2.0 or greater, RubyGems, GCC, and Make &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step 2: 
Now in the terminal you want to install Jekyll and Bundler Gems using the following command: gem install jekyll bundler&lt;/p&gt;

&lt;p&gt;Step 3: 
You’ll need to locate where you cloned your repository from GitHub and traverse into that directory using the command line. Once inside the cloned repository folder you want to enter the following command to create a new Jekyll site: jekyll new myblog&lt;/p&gt;

&lt;p&gt;You can choose any name for the directory that will hold your jekyll files by changing the “myblog” portion to anything you want.&lt;/p&gt;

&lt;p&gt;Step 4: 
After you have entered the command in Step 3, Jekyll will populate the directory for you with necessary files. In contrast, McGlone’s tutorial makes a majority of these folders one by one. It is a bit tedious, but it will really give you a strong understanding of how important it is in Jekyll to have all your directories in the correct order with correct names. Now, the only thing you have to do is traverse into your “myblog” directory.&lt;/p&gt;

&lt;p&gt;Step 5: 
Once in the “myblog” directory, you can enter the following command to preview your new blog: bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;After entering the command you can open up a web browser and enter the server address given to you in the command line.&lt;/p&gt;

&lt;h2&gt; Where To Go From Here? &lt;/h2&gt;
&lt;p&gt;Well, first things first you can open config.yml in your “myblog” directory and you can make some basic changes, such as your email, twitter handle, or title of your blog. It will be clear where you can make these changes given the setup of the document. Stay tuned to my next post on …. you guessed it POSTING!&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Well, that was painful, for a newbie… but then again, no pain…no gain! Cheesy lines aside, Jekyll is not as intuitive as it might seem from a beginners perspective. The documentation is heavy on jargon and there are multiple resources on both GitHub Pages and Jekyll, which have differing setup procedures and can be overwhelming. In fact, looking back on the other side it was incredibly easy, but you can easily get overwhelmed with all the information. They do point to a great resource in Jonathan McGlone’s Creating and Hosting a Personal Site on GitHub . Although a great resource that really allows you to personalize your page, you can bypass this tutorial to get a simple blog up and running in a matter of minutes using this quick setup guide that I have written below with the help of documentation from GitHub Pages, Jekyll, and McGlone’s tutorial.</summary></entry></feed>