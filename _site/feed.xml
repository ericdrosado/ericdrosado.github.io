<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-30T12:23:13-05:00</updated><id>http://localhost:4000/</id><title type="html">On the Path to Software Craftsmanship</title><subtitle>Follow along on a journey of one 8th Light Student Aprentice's path to becoming a Software Craftsman.
</subtitle><entry><title type="html">The Usefulness Of Configurations In Rspec</title><link href="http://localhost:4000/2017/05/30/the-usefulness-of-configurations-in-rspec.html" rel="alternate" type="text/html" title="The Usefulness Of Configurations In Rspec" /><published>2017-05-30T00:00:00-05:00</published><updated>2017-05-30T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/30/the-usefulness-of-configurations-in-rspec</id><content type="html" xml:base="http://localhost:4000/2017/05/30/the-usefulness-of-configurations-in-rspec.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Using RSpec for testing is absoultely amazing for a complete beginner. I’ve personally dabbled in testing with Java, which was a bit rough, but I have to say that learning RSpec is super straightforward and the way RSpec reads is incredibly beautiful! Besides, reading RSpec in your favorite editor, testing results in the terminal can also read beautifully. The best part, you can customize how your tests look in the terminal through configurations. There is a list of RSpec configurations you can use, but I just want to talk about four of them that I recently learned about from Kevin Skoglund’s, “Ruby: Testing with RSpec - Configurations” video.&lt;sup&gt; 1 &lt;/sup&gt;&lt;/p&gt;

&lt;h2&gt; Configurations in RSpec: &lt;/h2&gt;
&lt;p&gt;The four Configurations that I plan on covering are: 
  1.) Run Tests at Random
  2.) Show Top 10 Slowest Tests
  3.) Find a Single Failure
  4.) Run a Particular Test&lt;/p&gt;

&lt;p&gt;You can set and save these configurations on your computer or you can ship them with code you might push to GitHub. For the purposes of this blog I am just going to show how to call these without saving them locally so you don’t have to make any changes to your environment or affect anyones settings in their personal enviornment by forking your code.&lt;/p&gt;

&lt;h3&gt;Run Tests at Random&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In order to run tests at random you can traverse to the directory that is holding your .rspec file that you initiated. Once there you can run the command:

rspec --order random 

This will run all your tests at random. Why would this be helpful? Well, lets say you have many tests and you want to insure that their order doesn't play a role on whether or not they pass or fail, that would make this tool helpful.&amp;lt;sup&amp;gt; 1 &amp;lt;/sup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Show Top 10 Slowest Tests&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In order to show the top 10 slowest tests you can once again traverse to the directory that is holding your .rspec file that you initiated. Once there you can run the command:

rspec --profile

This will obviously give you a list of your top 10 slowest tests. If there is one thing I have learned is that tests should be fast! &amp;lt;sup&amp;gt; 2 &amp;lt;/sup&amp;gt; Tests should be fast so that you run them and run them often, whereas if you have very slow tests, you are less likely to run them all. Sometimes it is good to go back and see what you can do to allow your tests to run faster.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Find a Single Failure&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;In order to find a single failure you can once again traverse to the directory that is holding your .rspec file that you initiated. Once there you can run the command:

rspec --fail-fast

This will quickly run and find a single failure. This is helpful if you have many tests and you just want to deal with them one at a time. Really nothing more to it...moving on.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Run a particular test&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Now, here is a tool you may come to love as much as I have. When it comes to trouble shooting sometimes you just need to test a specific test where this little one comes in handy. You can do this by typing in the name of the rspec file followed by the first line your test is on. In order to do this you need to be in the directory where your test file is or you can write out the path. Here is an example of a rspec file called &quot;car_spec&quot; while already traversing into the spec directory:

rspec car_spec.rb:7

Notice the rspec call, then the file name, followed by the line number after the colon. Once again, a great way to test a specific test in your long list of tests.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;sup&gt; 1 &lt;/sup&gt; Skoglund, Kevin. (2015, February 5). www.Lynda.com - Ruby: Testing with RSpec: Configuration .Retrieved from https://www.lynda.com/Ruby-tutorials/Configuration/183884/371434-4.html
&lt;sup&gt; 2 &lt;/sup&gt; Haines, Corey. (2014, June 4). “Four Rules of Simple Design”. LeanuPub Publishing 2014&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Using RSpec for testing is absoultely amazing for a complete beginner. I’ve personally dabbled in testing with Java, which was a bit rough, but I have to say that learning RSpec is super straightforward and the way RSpec reads is incredibly beautiful! Besides, reading RSpec in your favorite editor, testing results in the terminal can also read beautifully. The best part, you can customize how your tests look in the terminal through configurations. There is a list of RSpec configurations you can use, but I just want to talk about four of them that I recently learned about from Kevin Skoglund’s, “Ruby: Testing with RSpec - Configurations” video. 1</summary></entry><entry><title type="html">How To Post Using Jekyll</title><link href="http://localhost:4000/2017/05/23/how-to-post-using-jekyll.html" rel="alternate" type="text/html" title="How To Post Using Jekyll" /><published>2017-05-23T00:00:00-05:00</published><updated>2017-05-23T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/23/how-to-post-using-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/05/23/how-to-post-using-jekyll.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Your first Jekyll post! Thankfully this is an incredibly simple process as long as you have already followed along with my previous post on &lt;a href=&quot;https://ericdrosado.github.io/2017/05/22/setting-up-jekyll-with-github-pages.html&quot;&gt; Setting up Jekyll with Github Pages &lt;/a&gt;, as I’ll assume all your directories have already been made for Jekyll.&lt;/p&gt;

&lt;h2&gt; Posting your First Post to GitHub Pages: &lt;/h2&gt;
&lt;p&gt;In order to post your first post to GitHub Pages you will need to be familiar with the naming requirement for Jekyll when it comes to posts. Jekyll requires that every post follows the naming convention: Year-Month-Day-title.Markup. So, for example, today is 5/23/17 and I wanted to name this post as “How to Post Using Jekyll.” I would create my document with the following name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-05-23-how-to-post-using-jekyll/jekyll_naming-example.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you know how to name your document you need to create/place your document into the correct directory. In your GitHub pages directory, _posts is where you will place all of your posts, because Jekyll has the functionality to find your posts and immediately publish them online once they have been pushed to GitHub.&lt;sup&gt; 1 &lt;/sup&gt; So, traverse into your _posts directory and save your document with the correct naming convention mentioned above.&lt;/p&gt;

&lt;p&gt;You can open the document, write your post and when you are done, push your changes to GitHub, in which Jekyll will automagically create your post on GitHub Pages. Wow!&lt;/p&gt;

&lt;p&gt;&lt;sup&gt; 1 &lt;/sup&gt; Writing Posts. (n.d.). Jekyll. Retrieved from https://jekyllrb.com/docs/posts/&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Your first Jekyll post! Thankfully this is an incredibly simple process as long as you have already followed along with my previous post on Setting up Jekyll with Github Pages , as I’ll assume all your directories have already been made for Jekyll.</summary></entry><entry><title type="html">Setting Up Jekyll With Github Pages</title><link href="http://localhost:4000/2017/05/22/setting-up-jekyll-with-github-pages.html" rel="alternate" type="text/html" title="Setting Up Jekyll With Github Pages" /><published>2017-05-22T00:00:00-05:00</published><updated>2017-05-22T00:00:00-05:00</updated><id>http://localhost:4000/2017/05/22/setting-up-jekyll-with-github-pages</id><content type="html" xml:base="http://localhost:4000/2017/05/22/setting-up-jekyll-with-github-pages.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Well, that was painful, for a newbie… but then again, no pain…no gain! Cheesy lines aside, Jekyll is not as intuitive as it might seem from a beginners perspective. The documentation is heavy on jargon and there are multiple resources on both GitHub Pages and Jekyll, which have differing setup procedures and can be overwhelming. In fact, looking back on the other side it was incredibly easy, but you can easily get overwhelmed with all the information. They do point to a great resource in Jonathan McGlone’s &lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot;&gt; Creating and Hosting a Personal Site on GitHub &lt;/a&gt;. Although a great resource that really allows you to personalize your page, you can bypass this tutorial to get a simple blog up and running in a matter of minutes using this quick setup guide that I have written below with the help of documentation from GitHub Pages, Jekyll, and McGlone’s tutorial.&lt;/p&gt;

&lt;h2&gt; Setting Up GitHub Pages: &lt;/h2&gt;
&lt;p&gt;GitHub nails it with simplicity when they explain &lt;a href=&quot;https://pages.github.com&quot;&gt; how to create a GitHub page &lt;/a&gt;. My personal experience is that GitHub tries to take the perspective of someone who has absolutely no experience and they will guide you along the path. Highly recommend following the link to setup your page and meet me back here for the Jekyll setup.&lt;/p&gt;

&lt;h2&gt; Setting Up Jekyll: &lt;/h2&gt;
&lt;p&gt;When it comes to the Jekyll documentation there is a lot of additonal info that I would say a beginner need not look at for the sake of your own sanity. I still recommend looking at the documentation once you feel comfortable, because there are some great tools to curate your blog. So, to bypass the documentation follow the following steps:&lt;/p&gt;

&lt;p&gt;Step 1: 
You need to make sure you have the following on your computer: &lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt; Ruby 2.0 or greater, RubyGems, GCC, and Make &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step 2: 
Now in the terminal you want to install Jekyll and Bundler Gems using the following command: gem install jekyll bundler&lt;/p&gt;

&lt;p&gt;Step 3: 
You’ll need to locate where you cloned your repository from GitHub and traverse into that directory using the command line. Once inside the cloned repository folder you want to enter the following command to create a new Jekyll site: jekyll new myblog&lt;/p&gt;

&lt;p&gt;You can choose any name for the directory that will hold your jekyll files by changing the “myblog” portion to anything you want.&lt;/p&gt;

&lt;p&gt;Step 4: 
After you have entered the command in Step 3, Jekyll will populate the directory for you with necessary files. In contrast, McGlone’s tutorial makes a majority of these folders one by one. It is a bit tedious, but it will really give you a strong understanding of how important it is in Jekyll to have all your directories in the correct order with correct names. Now, the only thing you have to do is traverse into your “myblog” directory.&lt;/p&gt;

&lt;p&gt;Step 5: 
Once in the “myblog” directory, you can enter the following command to preview your new blog: bundle exec jekyll serve&lt;/p&gt;

&lt;p&gt;After entering the command you can open up a web browser and enter the server address given to you in the command line.&lt;/p&gt;

&lt;h2&gt; Where To Go From Here? &lt;/h2&gt;
&lt;p&gt;Well, first things first you can open config.yml in your “myblog” directory and you can make some basic changes, such as your email, twitter handle, or title of your blog. It will be clear where you can make these changes given the setup of the document. Stay tuned to my next post on …. you guessed it POSTING!&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Well, that was painful, for a newbie… but then again, no pain…no gain! Cheesy lines aside, Jekyll is not as intuitive as it might seem from a beginners perspective. The documentation is heavy on jargon and there are multiple resources on both GitHub Pages and Jekyll, which have differing setup procedures and can be overwhelming. In fact, looking back on the other side it was incredibly easy, but you can easily get overwhelmed with all the information. They do point to a great resource in Jonathan McGlone’s Creating and Hosting a Personal Site on GitHub . Although a great resource that really allows you to personalize your page, you can bypass this tutorial to get a simple blog up and running in a matter of minutes using this quick setup guide that I have written below with the help of documentation from GitHub Pages, Jekyll, and McGlone’s tutorial.</summary></entry></feed>