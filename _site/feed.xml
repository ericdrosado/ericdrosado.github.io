<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-28T21:32:47-05:00</updated><id>http://localhost:4000/</id><title type="html">On the Path to Software Craftsmanship</title><subtitle>Follow along on a journey of one 8th Light Student Aprentice's path to becoming a Software Craftsman.
</subtitle><entry><title type="html">An Introduction To Shell Scripting With Ruby</title><link href="http://localhost:4000/2017/08/28/an-introduction-to-shell-scripting-with-ruby.html" rel="alternate" type="text/html" title="An Introduction To Shell Scripting With Ruby" /><published>2017-08-28T00:00:00-05:00</published><updated>2017-08-28T00:00:00-05:00</updated><id>http://localhost:4000/2017/08/28/an-introduction-to-shell-scripting-with-ruby</id><content type="html" xml:base="http://localhost:4000/2017/08/28/an-introduction-to-shell-scripting-with-ruby.html">&lt;h2&gt; Intro &lt;/h2&gt;
&lt;p&gt;As an apprentice at 8th Light, there are plenty of opportunities to be exposed to a wide variety of tools. Fairly recently I and a few other apprentices were introduced to shell scripting utilizing Bash. I must admit that a great deal of the information went over my head, but I did manage to get my feet wet in the world of shell scripting with Ruby. This may be a surprise to many, but Ruby has the ability to be very powerful on the command line as well as for scripts. I find that because of Ruby’s readability it is a great language to learn a wide variety of concepts. For example, I am now writing an unbeatable javascript tic-tac-toe game, and I have found that examples in Ruby have helped my comprehension of the Mini-Max algorithm. Ruby has served as an incredible bridge for difficult concepts, and when I found out that Ruby could be used as a shell scripting tool, I couldn’t resist to try.&lt;/p&gt;

&lt;h2&gt; Ruby on the Command Line &lt;/h2&gt;
&lt;p&gt;When it comes to scripting on the command line lets start with the most basic concept, how to execute a command on the command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ruby -e 'puts &quot;Hello World!&quot;'
  Hello World
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using the ‘-e’ command coupled with the ‘ruby’ call, you can run a wide variety of Ruby. You could also run multiple commands using multiple ‘-e’ commands or a ‘;’ in between commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ruby -e 'puts &quot;Hello World!&quot;' -e 'puts &quot;Hi!&quot;'
  Hello World!
  Hi!

  $ ruby -e 'puts &quot;Hello World!&quot;; puts &quot;Hi!&quot;'
  Hello World!
  Hi!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Reading Files&lt;/h3&gt;
&lt;p&gt;Once I was able to do a few simple commands, I looked for ways to read documents. The next useful command I will introduce is ‘ARGF’ is a stream that can be used for reading STDIN and files passed as arguments. Lets pretend we have a simple text file called ‘birthday.txt’ that has the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1 Happy Birthday to you,
  2 Happy Birthday to you,
  3 Happy Birthday dear Eric,
  4 Happy Birthday to you!
  5 How Old are you now,
  6 How Old are you now,
  7 How Old are you now,
  8 How Old are you now!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here I can read a specific line using the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ruby -e 'puts ARGF.readlines[0]' birthday.txt
  Happy Birthday to you,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, the first line of the text will be pulled from birthday.txt and displayed. You could also grab the first ‘n’ amount of lines or last ‘n’ amount of lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ruby -e 'puts ARGF.readlines.first(2)' birthday.txt
  Happy Birthday to you,
  Happy Birthday to you,

  $ruby -e 'puts ARGF.readlines.last(5)' birthday.txt
  Happy Birthday to you!
  How Old are you now,
  How Old are you now,
  How Old are you now,
  How Old are you now!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Computing Word Frequency&lt;/h3&gt;
&lt;p&gt;Lets take a deeper dive with our new found skills and see if we can compute the frequency in which a word appears in a given text. Before I do that, let me explain a few new commands. The flag -n is used to loop through your document, line by line, in the style of ‘while gets; &lt;your script=&quot;&quot;&gt;; end'. There is also the flag -a which is used to auto split each word found in a line. Then we have the global variable $F, which receives output from the the &quot;split&quot; command. Lets take this knowledge and dissect the following commands:&lt;/your&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ ruby -n -a -e 'BEGIN { words = Hash.new(0) }' \
  -e '$F.each { |w| words[w] += 1 }' \
  -e 'END { words.select {|k,v| v &amp;gt; 6}.sort_by { |k,v| [-v, k] }.each { |k,v| puts &quot;#{k} - #{v}&quot; } }' \
  birthday.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first command creates a new hash. The next command adds one to each occurrence of a particular word. The last command sorts it in descending order.&lt;/p&gt;

&lt;p&gt;The result that should return is:
      you - 7&lt;/p&gt;

&lt;p&gt;This is so because in my third command I only wanted words that appeared greater than 6 times.&lt;/p&gt;

&lt;h3&gt;Creating a Script&lt;/h3&gt;
&lt;p&gt;Now that I had a little know how, I wanted to create my first script using the previous command. The result is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1 #!/usr/bin/env ruby
  2
  3 input = ARGV[0]
  4 words = Hash.new(0)
  5 word = File.open( input ){ |f|  f.read.split }
  6 word.each {|w| words[w] += 1 }
  7 words.select {|k,v| v &amp;gt; 2}.sort_by { |k,v| [-v, k] }.each { |k,v| puts &quot;#{k} - #{v}&quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, if I wanted to use this script, which I called ‘sample_script.rb’ I could do the following on the command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ chmod +x sample_script.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This makes the script executable. Then I can run it, with the parameter that I would like to push through in the ARGV array.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ sample_script.rb birthday.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Simply put, I am calling my script and passing my birthday.txt document as a parameter. The document ‘birthday.txt’ is passed through and opened in line 5. In the end the script runs, exactly like the previous commands I ran on the command line, but now all I have to do is call my script as opposed to retyping or creating an alias for the previous commands.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Shell scripting can be a bit difficult at first, but if you want to create a few commands you can run on the fly and potentially share these scripts with friends and colleagues, I highly recommend shell scripting, especially with Ruby.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro As an apprentice at 8th Light, there are plenty of opportunities to be exposed to a wide variety of tools. Fairly recently I and a few other apprentices were introduced to shell scripting utilizing Bash. I must admit that a great deal of the information went over my head, but I did manage to get my feet wet in the world of shell scripting with Ruby. This may be a surprise to many, but Ruby has the ability to be very powerful on the command line as well as for scripts. I find that because of Ruby’s readability it is a great language to learn a wide variety of concepts. For example, I am now writing an unbeatable javascript tic-tac-toe game, and I have found that examples in Ruby have helped my comprehension of the Mini-Max algorithm. Ruby has served as an incredible bridge for difficult concepts, and when I found out that Ruby could be used as a shell scripting tool, I couldn’t resist to try.</summary></entry><entry><title type="html">The Test Automation Pyramid</title><link href="http://localhost:4000/2017/08/20/the-test-automation-pyramid.html" rel="alternate" type="text/html" title="The Test Automation Pyramid" /><published>2017-08-20T00:00:00-05:00</published><updated>2017-08-20T00:00:00-05:00</updated><id>http://localhost:4000/2017/08/20/the-test-automation-pyramid</id><content type="html" xml:base="http://localhost:4000/2017/08/20/the-test-automation-pyramid.html">&lt;h2&gt; Intro &lt;/h2&gt;
&lt;p&gt;I just finished reading Robert Martin’s (Uncle Bob), “The Clean Coder.” It is pretty much a reflections on his career and a means of him distilling his experience into chapters of information on what lead him to be a successful professional. In this post I wanted to take an opportunity to write about a concept that Martin brings up in Chapter 8: Testing Strategies. Martin argues that in order to be a true professional, you should be kind to those who work in QA, and minimize the issues/bugs that QA finds in your code. In order to successfully do this, Martin discusses how a Professional Development Team should go about implementing, what he calls “The Test Automation Pyramid.” The pyramid contains the following: Unit Tests; Component Tests; Integration Tests; System Tests; Exploratory Tests. In this post I’ll write about each portion of the pyramid and what it pertains to.&lt;/p&gt;

&lt;h2&gt; Unit Tests &lt;/h2&gt;
&lt;p&gt;As developers or in my case, future developer, we should all be familiar with the unit test. The goal of these tests is to test the functionality of our code at the lowest level. As good practice, developers should write these tests before writing their code. The benefit of writing the tests first allow you to think simply about the functionality of your future code. You will also find that you write cleaner code by writing these tests first.&lt;/p&gt;

&lt;h2&gt; Component Tests &lt;/h2&gt;
&lt;p&gt;These tests are written for individual components of the system. The idea is to take a single component of your code and test it by passing input data into the component and gather output data that matches your intentions. Component tests are usually written by those in QA with the assistance of developers. A great majority of the tests focus on happy-path situations and alternate-path situations. All un-happy path cases should be done during Unit Tests.&lt;/p&gt;

&lt;h2&gt; Integration Tests &lt;/h2&gt;
&lt;p&gt;These tests, test larger systems. The goal is to take multiple components and test the way they interact with each other. The goal is to see how well these components are “choreographed” when it comes to running them together, while mocking or doubling other components. These tests are typically written by architects or lead designers. These tests insure that the architecture of the system is sound.&lt;/p&gt;

&lt;h2&gt; System Tests &lt;/h2&gt;
&lt;p&gt;System Tests are considered the “Ultimate Integration Test,” as they test that the system has been “wired” up correctly and it’s parts interoperate as expected.&lt;/p&gt;

&lt;h2&gt; Exploratory Tests &lt;/h2&gt;
&lt;p&gt;Exploratory tests are tests where developers begin to interact with the system in hopes of discovering any bug or potential issues. This is an all hands on deck affair where the system is scrutinized to the fullest extent.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Through my experience at 8th Light I have seen the importance of testing. It is clear that testing is more than a luxury. Every team should invest their time and effort into developing workers with good testing habits to insure the success of the development team as well as the company as a whole.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro I just finished reading Robert Martin’s (Uncle Bob), “The Clean Coder.” It is pretty much a reflections on his career and a means of him distilling his experience into chapters of information on what lead him to be a successful professional. In this post I wanted to take an opportunity to write about a concept that Martin brings up in Chapter 8: Testing Strategies. Martin argues that in order to be a true professional, you should be kind to those who work in QA, and minimize the issues/bugs that QA finds in your code. In order to successfully do this, Martin discusses how a Professional Development Team should go about implementing, what he calls “The Test Automation Pyramid.” The pyramid contains the following: Unit Tests; Component Tests; Integration Tests; System Tests; Exploratory Tests. In this post I’ll write about each portion of the pyramid and what it pertains to.</summary></entry><entry><title type="html">The Future Of The Web Browser</title><link href="http://localhost:4000/2017/08/20/the-future-of-the-web-browser.html" rel="alternate" type="text/html" title="The Future Of The Web Browser" /><published>2017-08-20T00:00:00-05:00</published><updated>2017-08-20T00:00:00-05:00</updated><id>http://localhost:4000/2017/08/20/the-future-of-the-web-browser</id><content type="html" xml:base="http://localhost:4000/2017/08/20/the-future-of-the-web-browser.html">&lt;h2&gt; Intro &lt;/h2&gt;
&lt;p&gt;I have recently been involved in creating a JS (javascript) Tic Tac Toe game that is playable in the browser. With that I have experienced the highs and the lows of JS as a language. I can hear the JS die hards now, waiting to raise their pitchforks in rebellion in what I might say next, but to be honest…all of the hardship I have experienced with JS has made me even more motivated to master it. I’ve even joined a local JS MeetUp. But, a part of me wondered, why has nothing come along to take JS’s place? That is until I came across the future of the web … WebAssembly. In this post I would like to discuss WebAssembly and what the future might hold for how we interact with the web.&lt;/p&gt;

&lt;h2&gt; Meet WebAssembly &lt;/h2&gt;
&lt;p&gt;If you think about our experience with the web it could probably be summed up with the idea of applications, web browsers, and hardware that allows us to connect to the internet in some form (ex. video game consoles). Through these three we can experience the world in different ways. But what if we could combine the three. What if all these experiences could be done directly through a web browser. This is what WebAssembly is trying to tackle.&lt;/p&gt;

&lt;p&gt;Currently, WebAssembly allows developers to take C/C++ applications and compile it into a usable browser format. Get this, it can be done with nearly native speed! Welcome to the future Ladies and Gentlemen. Imagine a web where you can instantly load up your browser and immediately run an application at nearly native speeds.&lt;/p&gt;

&lt;h2&gt; The Future for Web Developers &lt;/h2&gt;
&lt;p&gt;As mentioned before, WebAssembly has the ability to take C/C++ applications so you can use them on the browser, but the promise is that more statically typed languages will join in the future. Imagine taking your code with the statically typed language of your choice and be able to upload it to the web to be used seamlessly without any issues. The browser would be our window to many interactive experiences where we will no longer need “an app for that.”&lt;/p&gt;

&lt;p&gt;JS has served the internet well, and will probably continue to do so, but with WebAssembly, Web Applications will be taken into a very promising future, where all our online experiences with blend together into a web browser.&lt;/p&gt;

&lt;p&gt;The fact that all major Web Browsers have been involved and plan on using WebAssembly makes me excited to see what the future holds for developers. We can be creators of anything and everything without the current restrictions we have today.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro I have recently been involved in creating a JS (javascript) Tic Tac Toe game that is playable in the browser. With that I have experienced the highs and the lows of JS as a language. I can hear the JS die hards now, waiting to raise their pitchforks in rebellion in what I might say next, but to be honest…all of the hardship I have experienced with JS has made me even more motivated to master it. I’ve even joined a local JS MeetUp. But, a part of me wondered, why has nothing come along to take JS’s place? That is until I came across the future of the web … WebAssembly. In this post I would like to discuss WebAssembly and what the future might hold for how we interact with the web.</summary></entry><entry><title type="html">Understanding The Bind Method</title><link href="http://localhost:4000/2017/08/14/understanding-the-bind-method.html" rel="alternate" type="text/html" title="Understanding The Bind Method" /><published>2017-08-14T00:00:00-05:00</published><updated>2017-08-14T00:00:00-05:00</updated><id>http://localhost:4000/2017/08/14/understanding-the-bind-method</id><content type="html" xml:base="http://localhost:4000/2017/08/14/understanding-the-bind-method.html">&lt;h2&gt; Intro &lt;/h2&gt;
&lt;p&gt;The bind method is an incredibly useful tool that allows you to define the context of a method when called again. I know, that sounds like gibberish. How about the MDN’s definition:&lt;/p&gt;

&lt;p&gt;“The bind() method creates a new function that when called, has its ‘this’ keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.”&lt;/p&gt;

&lt;p&gt;Any better? Well, if you are like me an example is worth a thousand words. In this blog we will go over the bind method to see how helpful it can be to use bind especially if you find yourself getting ‘undefined’ in the console when calling a method.&lt;/p&gt;

&lt;h2&gt; Bind Example &lt;/h2&gt;
&lt;p&gt;The following example has been adapted from user ‘nkron’ on Stack Overflow. Lets say we want to display some information after a button click. First lets define the information that  will be displayed when the button is clicked.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So here we want to create a ‘this’ variable so it can be our parameter for the new function that will be created when bind is called. This way, our ‘this’ variable takes on the same identity. A little more on this later. Next lets setup our click method and lets create a new button object utilizing our method:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now here, what would you expect your console output to be? Well, if you guessed “OK clicked” you would be correct. We expect that our information would still be bound to Button. But, what happens if we reassign ‘myButton.click’?&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&quot;OK clicked&quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;looseClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;looseClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we have an issue. By not binding myButton.click, the ‘information’ that was attached to this.information would be undefined as it is being expressed globally and no longer through myButton.click. The variable in this case is not defined, thus the console print out would be “undefined clicked”.&lt;/p&gt;

&lt;p&gt;Now lets take a look at what bind can do:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' clicked'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OK'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&quot;OK clicked&quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;looseClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;looseClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&quot;undefined clicked&quot;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boundClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;boundClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What happens here is a binding event where the bind method creates a brand new method and passes whatever the ‘this’ variable is as it’s parameter, which in turn keeps the definition of ‘this.information’ for us. So, we should expect our output in the console to be “OK clicked”.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Notice how bind can be an incredibly helpful tool when it comes to keeping definitions of variables intact when a method is called from a new object or even if a method is passed from method to method.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro The bind method is an incredibly useful tool that allows you to define the context of a method when called again. I know, that sounds like gibberish. How about the MDN’s definition:</summary></entry><entry><title type="html">Understanding This In Javascript</title><link href="http://localhost:4000/2017/08/07/understanding-this-in-javascript.html" rel="alternate" type="text/html" title="Understanding This In Javascript" /><published>2017-08-07T00:00:00-05:00</published><updated>2017-08-07T00:00:00-05:00</updated><id>http://localhost:4000/2017/08/07/understanding-this-in-javascript</id><content type="html" xml:base="http://localhost:4000/2017/08/07/understanding-this-in-javascript.html">&lt;h2&gt; Intro &lt;/h2&gt;
&lt;p&gt;In the past I have worked through a variety of tutorials involving Javascript, and I have also made a few small projects along the way. This time around, I found myself particularly interested in the concept of “this,” as it still alludes my understanding completely. This post is an attempt to summarize ‘this’ basics from a great article I found called &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;“Understand Javascript’s ‘this’ with Clarity, and Master It.”&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt; Think of 'this' as a Pronoun &lt;/h2&gt;
&lt;p&gt;In case you need a refresher on the meaning of a pronoun, it is a word that substitutes for a noun, a person, place, or thing. A few examples would be he, she, or it. They take the place of a noun for simplicity and prevents sentences like: “Eric likes to run because Eric enjoys exercise.” The more accepted sentence structure would be: “Eric likes to run because he enjoys exercise.” Now, as a reader you understand the context of ‘he’ because it clearly relates to the noun ‘Eric.’ Now, ‘this’ works in a similar fashion. Lets take a look at an example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wrigley&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;petDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; is a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now notice that within the petDescription function we call out to the pet object to obtain it’s properties ‘type’ and ‘name.’ No big secrets exposed here, but this is a prime opportunity to utilize the ‘this’ keyword as our “pronoun:”&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wrigley&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;petDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; is a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, seeing this code we have a sense for the context of ‘this’ because the function is a property of our pet object. So in this case ‘this’ clearly refers to ‘pet.’&lt;/p&gt;

&lt;h2&gt; Using 'this' Globally &lt;/h2&gt;
&lt;p&gt;When utilizing ‘this’ through a global scope we have to understand that ‘window’ will represent our global object, unless in strict mode. So, lets take a look at the following:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Rhino&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;petDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; is a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Wrigley&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;petDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; is a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;petDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If we called the petDescription function outside of the pet object, what do you expect to get for your pet description? Well, you would get “Rhino is a cat” as your description as opposed to “Wrigley is a dog” in this particular case. Because we are running petDescription in a global context we are essentially saying ‘window.petDescription’. If I wanted to get “Wrigley is a dog” I would have to call ‘pet.petDescription()’.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Thinking of ‘this’ as a pronoun greatly simplifies the concept of ‘this’. I still highly recommend reading  &lt;a href=&quot;http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/&quot;&gt;“Understand Javascript’s ‘this’ with Clarity, and Master It”&lt;/a&gt; for additional clarity and helpful tips. Otherwise, this is enough of ‘this’ to get you through your first JS project.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro In the past I have worked through a variety of tutorials involving Javascript, and I have also made a few small projects along the way. This time around, I found myself particularly interested in the concept of “this,” as it still alludes my understanding completely. This post is an attempt to summarize ‘this’ basics from a great article I found called “Understand Javascript’s ‘this’ with Clarity, and Master It.”</summary></entry><entry><title type="html">How To Setup Quick And Nimble Using Cocoapods</title><link href="http://localhost:4000/2017/07/10/how-to-setup-quick-and-nimble-using-cocoapods.html" rel="alternate" type="text/html" title="How To Setup Quick And Nimble Using Cocoapods" /><published>2017-07-10T00:00:00-05:00</published><updated>2017-07-10T00:00:00-05:00</updated><id>http://localhost:4000/2017/07/10/how-to-setup-quick-and-nimble-using-cocoapods</id><content type="html" xml:base="http://localhost:4000/2017/07/10/how-to-setup-quick-and-nimble-using-cocoapods.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;I just recently had the opportunity to do a bowling kata with Swift, and I must say it brought me back to my Java days. The down side is that just finishing a Ruby app and making this transition to a strongly typed language really does put you through a mental exercise. I’m very happy I decided to start programming with Java as it would have probably been difficult to pick up Swift so quickly. Anyway…on to more important things, such as todays topic, which is installing Quick and Nimble, a nice testing framework that originates from the famous RSpec.&lt;/p&gt;

&lt;p&gt;My mentors tasked me with finding a testing framework to use with Swift and I gravitated towards Quick and Nimble, because of its readability. The unfortunate aspect of all this, was the inability to quickly setup Quick and Nimble from downloading to its implementation in Xcode. No offense to the Quick and Nimble Documentation, but it just wasn’t enough for me to get everything up and running quickly. In this post I will go step by step on how to download Quick and Nimble as well as, how to set-up your first test case.&lt;/p&gt;

&lt;h2&gt; Installing Quick and Nimble using CocoaPods &lt;/h2&gt;
&lt;p&gt;If you are not familiar with CocoaPods then the documentation leaves much to be desired. I’ll go over the five necessary steps below using macOS:&lt;/p&gt;

&lt;p&gt;1.) Install CocoaPods as a gem
2.) Create a project in Xcode
3.) Create a PodFile
4.) Install Quick and Nimble using CocoaPods
5.) Link Quick and Nimble to your tests&lt;/p&gt;

&lt;h3&gt; 1.) Install CocoaPods as a gem &lt;/h3&gt;
&lt;p&gt;If you have ever downloaded a gem, then this should be a fairly straightforward step if you have RubyGems installed. If you don’t I highly recommend downloading it using the package manager &lt;a href=&quot;https://brew.sh&quot;&gt;“HomeBrew”&lt;/a&gt; for macOS. To download CocoaPods, use the following command in your command line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, you may require to use the sudo keyword if your machine is setup differently. If you receive the error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now it may seem like nothing is happening, but the install should be going as expected. If you are the type that needs to visually see the process you can use the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod setup --verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Personally, I just trusted the machine and didn’t use the verbose command.&lt;/p&gt;

&lt;h3&gt; 2.) Create a project in Xcode &lt;/h3&gt;
&lt;p&gt;As I write this post I am using Xcode version 8.2.1, so some things may look different if you are using a different version.&lt;/p&gt;

&lt;p&gt;Go ahead and startup Xcode and you should see the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/xcode_main_screen.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here you will create a new project, not a workspace, but a project. I chose a “command line tool project” for my needs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/command_line.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will then be presented with the project options screen, which you can name as you wish. For this tutorial I choose QuickAndNimbleSetup for the project name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/project_options.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will then be presented with a project screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/project_screen.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point we need to create our first unit test file into our project. Right click on the project, which for me shows a blue document image (looks like a blueprint) followed by QuickAndNimbleSetup, and choose “New File.” Here you should be presented with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/new_test.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you should choose “Unit test case class,” which is highlighted in the image above. I named the file “spec.” I then created a spec folder by right clicking on the blue document image followed by QuickAndNimbleSetup and chose “new group” and named it “Spec.” Here is what the project looks like so far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/spec_folder.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;h3&gt; 3.) Create a PodFile &lt;/h3&gt;
&lt;p&gt;At this point you want to connect your project to the Quick and Nimble framework using CocoaPods. In order to do this we need to create a “PodFile.” In the command line, traverse into your directory which holds your QuickAndNimbleSetup (That’s if you named it that.) Project. Once there you want to type in:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to create a PodFile. Open the PodFile using your editor of choice. Instead this PodFile we want to target the frameworks we want to include in this project by typing the following Ruby code in the file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Uncomment the next line to define a global platform for your project&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# platform :ios, '9.0'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'QuickAndNimbleSetup'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Comment the next line if you're not using Swift and don't want to use dynamic frameworks&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;use_frameworks!&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Pods for QuickAndNimbleSetup&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testing_pods&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Quick'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pod&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nimble'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Spec'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testing_pods&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that I am targeting my “QuickAndNimbleSetup” project and my “Spec” folder to utilize the Quick and Nimble frameworks.&lt;/p&gt;

&lt;h3&gt; 4.) Install Quick and Nimble using CocoaPods &lt;/h3&gt;
&lt;p&gt;So far we have laid the ground work for our Quick and Nimble with the PodFile, but now we need to install Quick and Nimble using CocoaPods. In the command line in the directory that holds your project type the following to install:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it! You downloaded the Quick and Nimble files! Now comes the tricky part.&lt;/p&gt;

&lt;h3&gt; 5.) Link Quick and Nimble to your tests &lt;/h3&gt;
&lt;p&gt;Being new to Xcode, I’ve found that learning where everything is, is half the battle. Lets connect these frameworks to our tests by clicking on your blueprint for your project (the blue document image followed by QuickAndNimbleSetup) and click on the tab that says “Build Phases.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/build_phases.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In “Build Phases” you want to click on “Link Binary with Libraries” and press the “+” to add your Quick and then Nimble frameworks (Essentially pressing the “+” twice. Once to add “Quick” and the other to add “Nimble”).&lt;/p&gt;

&lt;p&gt;You are almost there! The very last thing you will need to do, besides writing out your test is to click on your main.swift file in Xcode and on the right hand side you should see a menu (if not hit the button that looks like a square with a blue vertical line on the right side, located on the top right corner) that looks like the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2017-07-10-how-to-setup-quick-and-nimble-using-cocoapods/target.png&quot; alt=&quot;&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and you want to click on the “Spec” button to insure your spec file is linked to your “main” file. That’s it!&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Setting up your environment will take some time as you can see, but in the end it is totally worth it to use such a great Testing Framework like Quick and Nimble.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: I just recently had the opportunity to do a bowling kata with Swift, and I must say it brought me back to my Java days. The down side is that just finishing a Ruby app and making this transition to a strongly typed language really does put you through a mental exercise. I’m very happy I decided to start programming with Java as it would have probably been difficult to pick up Swift so quickly. Anyway…on to more important things, such as todays topic, which is installing Quick and Nimble, a nice testing framework that originates from the famous RSpec.</summary></entry><entry><title type="html">The Law Of Demeter</title><link href="http://localhost:4000/2017/06/29/the-law-of-demeter.html" rel="alternate" type="text/html" title="The Law Of Demeter" /><published>2017-06-29T00:00:00-05:00</published><updated>2017-06-29T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/29/the-law-of-demeter</id><content type="html" xml:base="http://localhost:4000/2017/06/29/the-law-of-demeter.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;You know that moment when you are learning to program and everything starts to click. You start stringing together methods in what you believe to be this beautiful symphony of functionality. Then, you come across a blog post, article, or book that says, “Actually, don’t do that… .” In comes the Law of Demeter (LoD). What?! LoD focuses on the idea of minimizing coupling in your code. Coupling?! Coupling, refers to how objects can call upon each other for some sort of functionality. If I lost you, thats OK, that’s what examples are for. Let’s dive in.&lt;/p&gt;

&lt;h2&gt; The Law of Demeter Example &lt;/h2&gt;
&lt;p&gt;Let’s imagine a program message chain. It might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@printer.print(&quot;Hello&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here I might have created a “printer object” that has a “print” method and I am using it to print “Hello.” OK, I’m utilizing an object to print something to the console using the method print. No coupling here! Now lets try to add another object into the loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@printer.print(@greeting.hello)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now here I have some coupling. Similar to before I have called my printer object to get it’s method print, but now I have another object named “greeting” that has a method named “hello,” which one might assume returns a “Hello” greeting. Now “print” is taking in a parameter from this object (greeting) and it’s method (hello). These objects have been coupled together. They are utilizing each others services in order to create some sort of functionality.&lt;/p&gt;

&lt;p&gt;Coupling is a necessity when it comes to functionality of code, but when it comes to breaking LoD that is when your coupling has gone from a necessity to an act of misuse. When is coupling bad? Well, when you are traversing through a great deal of classes in order to gain the functionality of a single method, then you know you might have a design problem. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@company.get_greeting(@manager.speak(@employee.speak(@apprentice.speak(@greeting.hello)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice how we traversed through multiple methods in order to obtain a single prompt for a greeting. This is problematic and reveals a few things about our code. One, our code interface might not be ideal if we have to traverse through so many methods. In turn, our code may know too much about other classes. No, our code doesn’t actually know about other methods per say, but what is happening is your knowledge of this particular piece of software is allowing you to reach out to far distances of classes in order to gain some sort of functionality that you need in a specific spot. It would be better to use code that hides implementation details from another class. What we have done in essence is bind our classes to each other by making these calls. Two, what happens if we happen to change a class or method along this particular path? We’ll be in a bit of trouble rewriting all of this code to account for the change.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;In the end it pays to decouple long chains of code to avoid pain later. It would be better to utilize an interface that minimizes this sort of chaining as well as creating classes that hide implementation from other classes so that classes don’t pick and choose which methods they want to utilize. If we allow this “picking and choosing” of methods this creates an unmanageable web of code if something should change. You lose a great deal of flexbility in your code. Follow LoD the best you can.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: You know that moment when you are learning to program and everything starts to click. You start stringing together methods in what you believe to be this beautiful symphony of functionality. Then, you come across a blog post, article, or book that says, “Actually, don’t do that… .” In comes the Law of Demeter (LoD). What?! LoD focuses on the idea of minimizing coupling in your code. Coupling?! Coupling, refers to how objects can call upon each other for some sort of functionality. If I lost you, thats OK, that’s what examples are for. Let’s dive in.</summary></entry><entry><title type="html">Creating Clean Interfaces</title><link href="http://localhost:4000/2017/06/29/creating-clean-interfaces.html" rel="alternate" type="text/html" title="Creating Clean Interfaces" /><published>2017-06-29T00:00:00-05:00</published><updated>2017-06-29T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/29/creating-clean-interfaces</id><content type="html" xml:base="http://localhost:4000/2017/06/29/creating-clean-interfaces.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;The idea of software design is a fairly new concept to me. I knew the basics, such as DRY, but in reality I was still creating potential issues in the console applications that I created. Now, being fairly new to software development I’ve noticed that you don’t really run into many ideas and practices of design in tutorials. I suspect that it is because a good majority of the projects you create or work on during tutorials are so small in code length. You don’t have to worry about design and interfaces, because you are simply learning the language. In this post I would like to share a bit of my current app and talk about some of the changes I made after reading Sandi Metz’s &lt;a href=&quot;http://www.poodr.com&quot;&gt;“POODR”&lt;/a&gt; book.&lt;/p&gt;

&lt;h2&gt; In the Beginning... &lt;/h2&gt;
&lt;p&gt;When I first created my Hangman app, I thought “….psh…piece of cake,” only to find that everytime I had to make changes I would have to change other methods or reveal more and more of my code to other objects to the point where almost every class was interweaved together. Initially, I saw this as a benefit as I created methods that other classes could utilize. But, what happens if one of my classes requires some other type of functionality from one of my methods later on…..OH POOP! Yep, I’ve created a much larger problem for myself.&lt;/p&gt;

&lt;p&gt;I’m going to share my first interface of my Hangman App. Yes, I am going to put myself “on blast” in hopes that another newbie could see what I am talking about, about a bad interface. Here it is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            GameView ----------
                |             |
  GameStart --Game-- IO ----  |
              |  |         |  |
              |  Prompter  |  |
              |      |     |  |
              Validator--------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This may be hard to follow, so let me explain. Each line represents a connection between classes. What I did was rely on dependency injections to connect some of my classes. Notice how my Game class is conncected to GameView, GameStart, IO, Promper, and Validator. OK, not too bad, but I have my Validator class connected to Prompter, IO, and GameView. I am weaving quite the web here for the sake of allowing my program to work.&lt;/p&gt;

&lt;h2&gt; And now... &lt;/h2&gt;
&lt;p&gt;Let’s take a look at my current interface:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          Validator      IO
              |          |
GameStart -- Game -- GameView -- Prompter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that this interface is very flat. This interface is way more deliberate in it’s execution as opposed to my first interface.&lt;/p&gt;

&lt;p&gt;How did I settle on this interface? Before we begin, let me provide a key of my classes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GameStart - A game runner to begin the game
Game - Handles main functionality of the game (Rules of Hangman)
Validator - A class that validates different aspects of the game such as: &quot;Is the word the player chose, really a word?&quot;
GameView - Controls everything that is displayed in the console
IO - Controls print and input
Prompter - Holds a list of different prompts that can be used in the game
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, you may have discovered why I have designed my interface in this fashion after reading about my individual classes. The goal was to connect classes that related to each other. Classes that are closely related by functionality should be closer together because they become easier to access, which in turn minimizes coupling, and the breaking of Demeter’s Law. Validator is close to Game as many aspects of the game must be validated, such as: “Is this letter that was chosen found in the word?” IO and Prompter are near GameView because they deal with what is displayed on the screen for the users. This layout now optimizes my program and minimizes long chains of coupling. Also, in the future, if I need to add additional functionality, it won’t be thrown into a web of messages across classes, but instead can be strategically placed.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;I highly recommed Sandi Metz’s POODR book! It really game me insight into good Object Oriented Design. I’m almost positive that my current design is not the best design, but it is a start. With more experience, comes a better understanding of design practices.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: The idea of software design is a fairly new concept to me. I knew the basics, such as DRY, but in reality I was still creating potential issues in the console applications that I created. Now, being fairly new to software development I’ve noticed that you don’t really run into many ideas and practices of design in tutorials. I suspect that it is because a good majority of the projects you create or work on during tutorials are so small in code length. You don’t have to worry about design and interfaces, because you are simply learning the language. In this post I would like to share a bit of my current app and talk about some of the changes I made after reading Sandi Metz’s “POODR” book.</summary></entry><entry><title type="html">Dependency Inversion Principle</title><link href="http://localhost:4000/2017/06/20/dependency-inversion-principle.html" rel="alternate" type="text/html" title="Dependency Inversion Principle" /><published>2017-06-20T00:00:00-05:00</published><updated>2017-06-20T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/20/dependency-inversion-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/20/dependency-inversion-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;If you have been following along in my journey through the SOLID principles, well, you’ve made it to the last principle, Dependency Inversion Principle (DIP). The DIP focuses on the importance of abstraction in creating software flexibility. Ultimately you want to depend on class abstractions as opposed to class concretions. What does this all mean? Lets go over it with an example.&lt;/p&gt;

&lt;h2&gt; Dependency Inversion Principle Example &lt;/h2&gt;
&lt;p&gt;Let’s continue to use our Art Gallery example and lets say that our Artwork class begins to become more complex with time and now there are lower level classes that it relies on, such as a wide variety of different types of paintings of specific eras. Let’s start with a MiddleAgesPainting Class.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def initialize()
    @middle_ages_painting = MiddleAgesPainting.new
  end

  def get_description
    @middle_ages_painting.description
  end

end

class MiddleAgesPainting

  def get_description
    #description
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So to go over the ruby above, what we have is a situation where our higher level class Artwork is dependent on its lower level counterpart when it comes to obtaining a description for MiddleAgesPainting. This seems fine, but what happens if we need to include a EarlyAndHighRenaissancePainting class. Now we are starting to add a bit of complication to our code that could continue to get messy with each additional era class that pops up. This is a violation of the DIP. What we want to do is depend on an abstraction of description as to not clutter our Artwork class. How do we do that? Let’s take a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def initialize(middle_ages_painting, early_and_high_renaissance_painting )
    @middle_ages_painting = middle_ages_painting
    @early_and_high_renaissance_painting = early_and_high_renaissance_painting
  end

  def get_description painting_era
    painting_era.description
  end

end

class MiddleAgesPainting

  def get_description
    #description
  end

end

class EarlyAndHighRenaissancePainting

  def get_description
    #description
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we have done some abstraction in the sense that my Arwork class is no longer reliant on any one of the lower level classes such as MiddleAgesPainting or EarlyAndHighRenaissancePainting. Instead, we have a situation where the painting_era can be passed through get_description in the Artwork class.&lt;/p&gt;

&lt;p&gt;I have also utilized a technique called Dependency Injection,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def initialize(middle_ages_painting, early_and_high_renaissance_painting )
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where I pass my painting era classes into my Artwork class through the initialize method so it is easily accessible to my Artwork class. This supports my higher level code with the ability to call down to my lower level code.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;As you can see, by utilizing abstractions we have a greater deal of flexibility with our code. If we used the first example, which is a concrete connection between my Artwork class and my MiddleAgesPainting class, I would have to do that for every additional painting era class that would come about over time, which in turn would force me to change my Artwork class often and hard code it to all these othere classes. Using DIP has now given me the freedom for my higher level class to call down to my lower level classes in an efficient way.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: If you have been following along in my journey through the SOLID principles, well, you’ve made it to the last principle, Dependency Inversion Principle (DIP). The DIP focuses on the importance of abstraction in creating software flexibility. Ultimately you want to depend on class abstractions as opposed to class concretions. What does this all mean? Lets go over it with an example.</summary></entry><entry><title type="html">Interface Segregation Principle</title><link href="http://localhost:4000/2017/06/19/interface-segregation-principle.html" rel="alternate" type="text/html" title="Interface Segregation Principle" /><published>2017-06-19T00:00:00-05:00</published><updated>2017-06-19T00:00:00-05:00</updated><id>http://localhost:4000/2017/06/19/interface-segregation-principle</id><content type="html" xml:base="http://localhost:4000/2017/06/19/interface-segregation-principle.html">&lt;h2&gt; Intro: &lt;/h2&gt;
&lt;p&gt;Much like the Single Responsibility Principle we have another principle that seeks to maintain separation of different software responsibilities in what is called the Interface Segregation Principle. The purpose of this principle is to ensure that a crafter is abstracting as much as possible when it comes to their particular piece of software. If you think of Java, you can create interfaces that allow you to abstract pieces of information that might not fit within a class hierarchy. This is helpful as it prevents creating dependencies that could cause issues down the road as the software grows.&lt;/p&gt;

&lt;p&gt;Java Interfaces aside, I believe what this principle is trying to get at is you want to separate functionality as much as possible so your software does not get tied up in what could become a situation where you have classes that do too much and in turn it makes it much harder to build flexibility into your software. Lets explore this with an example we’ve seen before.&lt;/p&gt;

&lt;h2&gt; Interface Segregation Principle Example &lt;/h2&gt;
&lt;p&gt;When I first blogged about SOLID, I started with the Single Responsibility Principle with the following example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    puts title
  end

  def get_artist artist
    puts artist
  end

  def get_description description
    puts description
  end

  def get_location location
    puts location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve used the Artwork Gallery example for all of the SOLID principles thus far, but for this particular principle let’s go back in time when our Gallery software was represented in a single class named Artwork.&lt;/p&gt;

&lt;p&gt;We’ve discussed that this is a clear violation of the Single Responsibility Principle. There is a lot going on in this one class and it lacks abstractions (aka lacks separation of methods) that allow for flexibility of your software. For instance, I’ve mentioned that this class is doing too much. It is printing values and giving you additional information such as location, which is not necessary when it comes to just getting basic information about the artwork.&lt;/p&gt;

&lt;p&gt;In the end of the Single Responsibility post we settled on the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Artwork

  def get_title title
    title
  end

  def get_artist artist
    artist
  end

  def get_description description
    description
  end

end

class Printer

  def print information_to_print
    puts information_to_print
  end

end

class Location

  def get_location location
    location
  end

end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, we abstracted by pulling out a Printer and Location class. We could have also created a printer interface for our Artwork class to handle Artwork specific printing. As mentioned many times before, this type of abstraction will help us greatly as our software grows.&lt;/p&gt;

&lt;h2&gt; Conclusion &lt;/h2&gt;
&lt;p&gt;Ultimately the biggest takeaway is that you want to prevent yourself from having a single interface that does too much. You want to have multiple interfaces to minimize dependencies on a single class. In the end you and your colleagues will be thankful that you did this from now and into the future.&lt;/p&gt;</content><author><name></name></author><summary type="html">Intro: Much like the Single Responsibility Principle we have another principle that seeks to maintain separation of different software responsibilities in what is called the Interface Segregation Principle. The purpose of this principle is to ensure that a crafter is abstracting as much as possible when it comes to their particular piece of software. If you think of Java, you can create interfaces that allow you to abstract pieces of information that might not fit within a class hierarchy. This is helpful as it prevents creating dependencies that could cause issues down the road as the software grows.</summary></entry></feed>